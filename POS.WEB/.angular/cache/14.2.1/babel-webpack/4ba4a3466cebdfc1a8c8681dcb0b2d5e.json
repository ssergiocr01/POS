{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Input, Output, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Optional, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\n\nconst _c0 = [\"input\"];\nconst _c1 = [\"label\"];\n\nconst _c2 = function (a0) {\n  return {\n    enterDuration: a0\n  };\n};\n\nconst _c3 = [\"*\"];\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n  providedIn: 'root',\n  factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    color: 'accent',\n    clickAction: 'check-indeterminate'\n  };\n} // Increasing integer for generating unique ids for checkbox components.\n\n\nlet nextUniqueId = 0; // Default checkbox configuration.\n\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\n\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n/** Change event object emitted by MatCheckbox. */\n\nclass MatCheckboxChange {} // Boilerplate for applying mixins to MatCheckbox.\n\n/** @docs-private */\n\n\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}))));\n\nclass _MatCheckboxBase extends _MatCheckboxMixinBase {\n  constructor(idPrefix, elementRef, _changeDetectorRef, _ngZone, tabIndex, _animationMode, _options) {\n    super(elementRef);\n    this._changeDetectorRef = _changeDetectorRef;\n    this._ngZone = _ngZone;\n    this._animationMode = _animationMode;\n    this._options = _options;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n     * take precedence so this may be omitted.\n     */\n\n    this.ariaLabel = '';\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n\n    this.ariaLabelledby = null;\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n\n    this.labelPosition = 'after';\n    /** Name value will be applied to the input element if present */\n\n    this.name = null;\n    /** Event emitted when the checkbox's `checked` value changes. */\n\n    this.change = new EventEmitter();\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n\n    this.indeterminateChange = new EventEmitter();\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n\n    this._onTouched = () => {};\n\n    this._currentAnimationClass = '';\n    this._currentCheckState = 0\n    /* TransitionCheckState.Init */\n    ;\n\n    this._controlValueAccessorChangeFn = () => {};\n\n    this._checked = false;\n    this._disabled = false;\n    this._indeterminate = false;\n    this._options = this._options || defaults;\n    this.color = this.defaultColor = this._options.color || defaults.color;\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this.id = this._uniqueId = `${idPrefix}${++nextUniqueId}`;\n  }\n  /** Returns the unique id for the visual hidden input. */\n\n\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  /** Whether the checkbox is required. */\n\n\n  get required() {\n    return this._required;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  ngAfterViewInit() {\n    this._syncIndeterminate(this._indeterminate);\n  }\n  /** Whether the checkbox is checked. */\n\n\n  get checked() {\n    return this._checked;\n  }\n\n  set checked(value) {\n    const checked = coerceBooleanProperty(value);\n\n    if (checked != this.checked) {\n      this._checked = checked;\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n\n\n  get indeterminate() {\n    return this._indeterminate;\n  }\n\n  set indeterminate(value) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = coerceBooleanProperty(value);\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(3\n        /* TransitionCheckState.Indeterminate */\n        );\n      } else {\n        this._transitionCheckState(this.checked ? 1\n        /* TransitionCheckState.Checked */\n        : 2\n        /* TransitionCheckState.Unchecked */\n        );\n      }\n\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n  /** Method being called whenever the label text changes. */\n\n\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  } // Implemented as part of ControlValueAccessor.\n\n\n  writeValue(value) {\n    this.checked = !!value;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked() {\n    if (this.checked) {\n      return 'true';\n    }\n\n    return this.indeterminate ? 'mixed' : 'false';\n  }\n\n  _transitionCheckState(newState) {\n    let oldState = this._currentCheckState;\n\n    let element = this._getAnimationTargetElement();\n\n    if (oldState === newState || !element) {\n      return;\n    }\n\n    if (this._currentAnimationClass) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass); // Remove the animation class to avoid animation when the checkbox is moved between containers\n\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.checked);\n\n    this.change.emit(this._createChangeEvent(this.checked)); // Assigning the value again here is redundant, but we have to do it in case it was\n    // changed inside the `change` listener which will cause the input to be out of sync.\n\n    if (this._inputElement) {\n      this._inputElement.nativeElement.checked = this.checked;\n    }\n  }\n  /** Toggles the `checked` state of the checkbox. */\n\n\n  toggle() {\n    this.checked = !this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n  }\n\n  _handleInputClick() {\n    var _a;\n\n    const clickAction = (_a = this._options) === null || _a === void 0 ? void 0 : _a.clickAction; // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n\n    if (!this.disabled && clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && clickAction !== 'check') {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this._checked = !this._checked;\n\n      this._transitionCheckState(this._checked ? 1\n      /* TransitionCheckState.Checked */\n      : 2\n      /* TransitionCheckState.Unchecked */\n      ); // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n\n\n      this._emitChangeEvent();\n    } else if (!this.disabled && clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  _onInteractionEvent(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  _onBlur() {\n    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n    // Angular does not expect events to be raised during change detection, so any state change\n    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n    // telling the form control it has been touched until the next tick.\n    Promise.resolve().then(() => {\n      this._onTouched();\n\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  _getAnimationClassForCheckStateTransition(oldState, newState) {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    switch (oldState) {\n      case 0\n      /* TransitionCheckState.Init */\n      :\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === 1\n        /* TransitionCheckState.Checked */\n        ) {\n          return this._animationClasses.uncheckedToChecked;\n        } else if (newState == 3\n        /* TransitionCheckState.Indeterminate */\n        ) {\n          return this._checked ? this._animationClasses.checkedToIndeterminate : this._animationClasses.uncheckedToIndeterminate;\n        }\n\n        break;\n\n      case 2\n      /* TransitionCheckState.Unchecked */\n      :\n        return newState === 1\n        /* TransitionCheckState.Checked */\n        ? this._animationClasses.uncheckedToChecked : this._animationClasses.uncheckedToIndeterminate;\n\n      case 1\n      /* TransitionCheckState.Checked */\n      :\n        return newState === 2\n        /* TransitionCheckState.Unchecked */\n        ? this._animationClasses.checkedToUnchecked : this._animationClasses.checkedToIndeterminate;\n\n      case 3\n      /* TransitionCheckState.Indeterminate */\n      :\n        return newState === 1\n        /* TransitionCheckState.Checked */\n        ? this._animationClasses.indeterminateToChecked : this._animationClasses.indeterminateToUnchecked;\n    }\n\n    return '';\n  }\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   */\n\n\n  _syncIndeterminate(value) {\n    const nativeCheckbox = this._inputElement;\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value;\n    }\n  }\n\n}\n\n_MatCheckboxBase.ɵfac = function _MatCheckboxBase_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n\n_MatCheckboxBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatCheckboxBase,\n  viewQuery: function _MatCheckboxBase_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n      i0.ɵɵviewQuery(MatRipple, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._labelElement = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    }\n  },\n  inputs: {\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"],\n    id: \"id\",\n    required: \"required\",\n    labelPosition: \"labelPosition\",\n    name: \"name\",\n    value: \"value\",\n    checked: \"checked\",\n    disabled: \"disabled\",\n    indeterminate: \"indeterminate\"\n  },\n  outputs: {\n    change: \"change\",\n    indeterminateChange: \"indeterminateChange\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatCheckboxBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: undefined\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined\n    }, {\n      type: undefined\n    }, {\n      type: undefined\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    id: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    indeterminateChange: [{\n      type: Output\n    }],\n    value: [{\n      type: Input\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }],\n    _labelElement: [{\n      type: ViewChild,\n      args: ['label']\n    }],\n    ripple: [{\n      type: ViewChild,\n      args: [MatRipple]\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    indeterminate: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n\n\nclass MatCheckbox extends _MatCheckboxBase {\n  constructor(elementRef, changeDetectorRef, _focusMonitor, ngZone, tabIndex, animationMode, options) {\n    super('mat-checkbox-', elementRef, changeDetectorRef, ngZone, tabIndex, animationMode, options);\n    this._focusMonitor = _focusMonitor;\n    this._animationClasses = {\n      uncheckedToChecked: 'mat-checkbox-anim-unchecked-checked',\n      uncheckedToIndeterminate: 'mat-checkbox-anim-unchecked-indeterminate',\n      checkedToUnchecked: 'mat-checkbox-anim-checked-unchecked',\n      checkedToIndeterminate: 'mat-checkbox-anim-checked-indeterminate',\n      indeterminateToChecked: 'mat-checkbox-anim-indeterminate-checked',\n      indeterminateToUnchecked: 'mat-checkbox-anim-indeterminate-unchecked'\n    };\n  }\n\n  _createChangeEvent(isChecked) {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = isChecked;\n    return event;\n  }\n\n  _getAnimationTargetElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        this._onBlur();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n\n\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    super._handleInputClick();\n  }\n  /** Focuses the checkbox. */\n\n\n  focus(origin, options) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n\n}\n\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) {\n  return new (t || MatCheckbox)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵdirectiveInject(MAT_CHECKBOX_DEFAULT_OPTIONS, 8));\n};\n\nMatCheckbox.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatCheckbox,\n  selectors: [[\"mat-checkbox\"]],\n  hostAttrs: [1, \"mat-checkbox\"],\n  hostVars: 14,\n  hostBindings: function MatCheckbox_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n      i0.ɵɵattribute(\"tabindex\", null)(\"aria-label\", null)(\"aria-labelledby\", null);\n      i0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matCheckbox\"],\n  features: [i0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c3,\n  decls: 17,\n  vars: 21,\n  consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-checkbox-persistent-ripple\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", \"aria-hidden\", \"true\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]],\n  template: function MatCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"span\", 2)(3, \"input\", 3, 4);\n      i0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) {\n        return ctx._onInteractionEvent($event);\n      })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"span\", 5);\n      i0.ɵɵelement(6, \"span\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"span\", 7);\n      i0.ɵɵelementStart(8, \"span\", 8);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(9, \"svg\", 9);\n      i0.ɵɵelement(10, \"path\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelement(11, \"span\", 11);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"span\", 12, 13);\n      i0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_12_listener() {\n        return ctx._onLabelTextChange();\n      });\n      i0.ɵɵelementStart(14, \"span\", 14);\n      i0.ɵɵtext(15, \"\\xA0\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵprojection(16);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n\n      const _r2 = i0.ɵɵreference(13);\n\n      i0.ɵɵattribute(\"for\", ctx.inputId);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex);\n      i0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked())(\"aria-describedby\", ctx.ariaDescribedby);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 20)(\"matRippleCentered\", true)(\"matRippleAnimation\", i0.ɵɵpureFunction1(19, _c2, ctx._animationMode === \"NoopAnimations\" ? 0 : 150));\n    }\n  },\n  dependencies: [i2.MatRipple, i3.CdkObserveContent],\n  styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);position:relative}.mat-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-checkbox-layout{-webkit-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:rgba(0,0,0,0);transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:rgba(0,0,0,0)}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox-input:focus~.mat-focus-indicator::before{content:\\\"\\\"}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'mat-checkbox',\n      exportAs: 'matCheckbox',\n      host: {\n        'class': 'mat-checkbox',\n        '[id]': 'id',\n        '[attr.tabindex]': 'null',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[class.mat-checkbox-indeterminate]': 'indeterminate',\n        '[class.mat-checkbox-checked]': 'checked',\n        '[class.mat-checkbox-disabled]': 'disabled',\n        '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n      },\n      providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n      inputs: ['disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n      styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);position:relative}.mat-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-checkbox-layout{-webkit-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:rgba(0,0,0,0);transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:rgba(0,0,0,0)}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox-input:focus~.mat-focus-indicator::before{content:\\\"\\\"}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n\nMatCheckboxRequiredValidator.ɵfac = /* @__PURE__ */function () {\n  let ɵMatCheckboxRequiredValidator_BaseFactory;\n  return function MatCheckboxRequiredValidator_Factory(t) {\n    return (ɵMatCheckboxRequiredValidator_BaseFactory || (ɵMatCheckboxRequiredValidator_BaseFactory = i0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator)))(t || MatCheckboxRequiredValidator);\n  };\n}();\n\nMatCheckboxRequiredValidator.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatCheckboxRequiredValidator,\n  selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n    type: Directive,\n    args: [{\n      selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n      providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n\n\nclass _MatCheckboxRequiredValidatorModule {}\n\n_MatCheckboxRequiredValidatorModule.ɵfac = function _MatCheckboxRequiredValidatorModule_Factory(t) {\n  return new (t || _MatCheckboxRequiredValidatorModule)();\n};\n\n_MatCheckboxRequiredValidatorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: _MatCheckboxRequiredValidatorModule\n});\n_MatCheckboxRequiredValidatorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatCheckboxRequiredValidatorModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MatCheckboxRequiredValidator],\n      declarations: [MatCheckboxRequiredValidator]\n    }]\n  }], null, null);\n})();\n\nclass MatCheckboxModule {}\n\nMatCheckboxModule.ɵfac = function MatCheckboxModule_Factory(t) {\n  return new (t || MatCheckboxModule)();\n};\n\nMatCheckboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatCheckboxModule\n});\nMatCheckboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule, MatCommonModule, _MatCheckboxRequiredValidatorModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCheckboxModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule],\n      exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n      declarations: [MatCheckbox]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxBase, _MatCheckboxRequiredValidatorModule };","map":{"version":3,"names":["coerceBooleanProperty","i0","InjectionToken","forwardRef","EventEmitter","Directive","Input","Output","ViewChild","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Optional","Inject","NgModule","NG_VALUE_ACCESSOR","NG_VALIDATORS","CheckboxRequiredValidator","i2","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatRipple","MatRippleModule","MatCommonModule","ANIMATION_MODULE_TYPE","i1","i3","ObserversModule","MAT_CHECKBOX_DEFAULT_OPTIONS","providedIn","factory","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","color","clickAction","nextUniqueId","defaults","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatCheckbox","multi","MatCheckboxChange","_MatCheckboxMixinBase","constructor","_elementRef","_MatCheckboxBase","idPrefix","elementRef","_changeDetectorRef","_ngZone","tabIndex","_animationMode","_options","ariaLabel","ariaLabelledby","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","defaultColor","parseInt","id","_uniqueId","inputId","required","_required","value","ngAfterViewInit","_syncIndeterminate","checked","markForCheck","disabled","newValue","indeterminate","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","detectChanges","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","newState","oldState","element","_getAnimationTargetElement","classList","remove","_getAnimationClassForCheckStateTransition","length","add","animationClass","runOutsideAngular","setTimeout","_emitChangeEvent","_createChangeEvent","_inputElement","nativeElement","toggle","_handleInputClick","_a","Promise","resolve","then","_onInteractionEvent","event","stopPropagation","_onBlur","_animationClasses","uncheckedToChecked","checkedToIndeterminate","uncheckedToIndeterminate","checkedToUnchecked","indeterminateToChecked","indeterminateToUnchecked","nativeCheckbox","ɵfac","ɵdir","type","undefined","ElementRef","ChangeDetectorRef","NgZone","args","ariaDescribedby","_labelElement","ripple","changeDetectorRef","_focusMonitor","ngZone","animationMode","options","isChecked","source","monitor","subscribe","focusOrigin","ngOnDestroy","stopMonitoring","_onInputClick","focus","origin","focusVia","FocusMonitor","ɵcmp","CdkObserveContent","selector","exportAs","host","providers","inputs","encapsulation","None","changeDetection","OnPush","template","styles","decorators","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","ɵmod","ɵinj","exports","declarations","MatCheckboxModule","imports"],"sources":["C:/Projects/Sistema POS 2022/SirPosFront14/node_modules/@angular/material/fesm2015/checkbox.mjs"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Input, Output, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Optional, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        clickAction: 'check-indeterminate',\n    };\n}\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatCheckbox),\n    multi: true,\n};\n/** Change event object emitted by MatCheckbox. */\nclass MatCheckboxChange {\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}))));\nclass _MatCheckboxBase extends _MatCheckboxMixinBase {\n    constructor(idPrefix, elementRef, _changeDetectorRef, _ngZone, tabIndex, _animationMode, _options) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._options = _options;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n        this.labelPosition = 'after';\n        /** Name value will be applied to the input element if present */\n        this.name = null;\n        /** Event emitted when the checkbox's `checked` value changes. */\n        this.change = new EventEmitter();\n        /** Event emitted when the checkbox's `indeterminate` value changes. */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * @docs-private\n         */\n        this._onTouched = () => { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = 0 /* TransitionCheckState.Init */;\n        this._controlValueAccessorChangeFn = () => { };\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this._options = this._options || defaults;\n        this.color = this.defaultColor = this._options.color || defaults.color;\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.id = this._uniqueId = `${idPrefix}${++nextUniqueId}`;\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    /** Whether the checkbox is required. */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        this._syncIndeterminate(this._indeterminate);\n    }\n    /** Whether the checkbox is checked. */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        const checked = coerceBooleanProperty(value);\n        if (checked != this.checked) {\n            this._checked = checked;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    get indeterminate() {\n        return this._indeterminate;\n    }\n    set indeterminate(value) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = coerceBooleanProperty(value);\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(3 /* TransitionCheckState.Indeterminate */);\n            }\n            else {\n                this._transitionCheckState(this.checked ? 1 /* TransitionCheckState.Checked */ : 2 /* TransitionCheckState.Unchecked */);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n        this._syncIndeterminate(this._indeterminate);\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    _getAriaChecked() {\n        if (this.checked) {\n            return 'true';\n        }\n        return this.indeterminate ? 'mixed' : 'false';\n    }\n    _transitionCheckState(newState) {\n        let oldState = this._currentCheckState;\n        let element = this._getAnimationTargetElement();\n        if (oldState === newState || !element) {\n            return;\n        }\n        if (this._currentAnimationClass) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    element.classList.remove(animationClass);\n                }, 1000);\n            });\n        }\n    }\n    _emitChangeEvent() {\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(this._createChangeEvent(this.checked));\n        // Assigning the value again here is redundant, but we have to do it in case it was\n        // changed inside the `change` listener which will cause the input to be out of sync.\n        if (this._inputElement) {\n            this._inputElement.nativeElement.checked = this.checked;\n        }\n    }\n    /** Toggles the `checked` state of the checkbox. */\n    toggle() {\n        this.checked = !this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n    }\n    _handleInputClick() {\n        var _a;\n        const clickAction = (_a = this._options) === null || _a === void 0 ? void 0 : _a.clickAction;\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && clickAction !== 'check') {\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n            this._checked = !this._checked;\n            this._transitionCheckState(this._checked ? 1 /* TransitionCheckState.Checked */ : 2 /* TransitionCheckState.Unchecked */);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    _onBlur() {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        switch (oldState) {\n            case 0 /* TransitionCheckState.Init */:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === 1 /* TransitionCheckState.Checked */) {\n                    return this._animationClasses.uncheckedToChecked;\n                }\n                else if (newState == 3 /* TransitionCheckState.Indeterminate */) {\n                    return this._checked\n                        ? this._animationClasses.checkedToIndeterminate\n                        : this._animationClasses.uncheckedToIndeterminate;\n                }\n                break;\n            case 2 /* TransitionCheckState.Unchecked */:\n                return newState === 1 /* TransitionCheckState.Checked */\n                    ? this._animationClasses.uncheckedToChecked\n                    : this._animationClasses.uncheckedToIndeterminate;\n            case 1 /* TransitionCheckState.Checked */:\n                return newState === 2 /* TransitionCheckState.Unchecked */\n                    ? this._animationClasses.checkedToUnchecked\n                    : this._animationClasses.checkedToIndeterminate;\n            case 3 /* TransitionCheckState.Indeterminate */:\n                return newState === 1 /* TransitionCheckState.Checked */\n                    ? this._animationClasses.indeterminateToChecked\n                    : this._animationClasses.indeterminateToUnchecked;\n        }\n        return '';\n    }\n    /**\n     * Syncs the indeterminate value with the checkbox DOM node.\n     *\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n     * server-side rendering.\n     */\n    _syncIndeterminate(value) {\n        const nativeCheckbox = this._inputElement;\n        if (nativeCheckbox) {\n            nativeCheckbox.nativeElement.indeterminate = value;\n        }\n    }\n}\n_MatCheckboxBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatCheckboxBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatCheckboxBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: _MatCheckboxBase, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], id: \"id\", required: \"required\", labelPosition: \"labelPosition\", name: \"name\", value: \"value\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }, { propertyName: \"_labelElement\", first: true, predicate: [\"label\"], descendants: true }, { propertyName: \"ripple\", first: true, predicate: MatRipple, descendants: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatCheckboxBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: undefined }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined }, { type: undefined }, { type: undefined }]; }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], id: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], indeterminateChange: [{\n                type: Output\n            }], value: [{\n                type: Input\n            }], _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }], _labelElement: [{\n                type: ViewChild,\n                args: ['label']\n            }], ripple: [{\n                type: ViewChild,\n                args: [MatRipple]\n            }], checked: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], indeterminate: [{\n                type: Input\n            }] } });\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxBase {\n    constructor(elementRef, changeDetectorRef, _focusMonitor, ngZone, tabIndex, animationMode, options) {\n        super('mat-checkbox-', elementRef, changeDetectorRef, ngZone, tabIndex, animationMode, options);\n        this._focusMonitor = _focusMonitor;\n        this._animationClasses = {\n            uncheckedToChecked: 'mat-checkbox-anim-unchecked-checked',\n            uncheckedToIndeterminate: 'mat-checkbox-anim-unchecked-indeterminate',\n            checkedToUnchecked: 'mat-checkbox-anim-checked-unchecked',\n            checkedToIndeterminate: 'mat-checkbox-anim-checked-indeterminate',\n            indeterminateToChecked: 'mat-checkbox-anim-indeterminate-checked',\n            indeterminateToUnchecked: 'mat-checkbox-anim-indeterminate-unchecked',\n        };\n    }\n    _createChangeEvent(isChecked) {\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = isChecked;\n        return event;\n    }\n    _getAnimationTargetElement() {\n        return this._elementRef.nativeElement;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                this._onBlur();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        super._handleInputClick();\n    }\n    /** Focuses the checkbox. */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n}\nMatCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatCheckbox, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }, { token: i0.NgZone }, { token: 'tabindex', attribute: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_CHECKBOX_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatCheckbox, selector: \"mat-checkbox\", inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\" }, host: { properties: { \"id\": \"id\", \"attr.tabindex\": \"null\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"class.mat-checkbox-indeterminate\": \"indeterminate\", \"class.mat-checkbox-checked\": \"checked\", \"class.mat-checkbox-disabled\": \"disabled\", \"class.mat-checkbox-label-before\": \"labelPosition == \\\"before\\\"\", \"class._mat-animation-noopable\": \"_animationMode === 'NoopAnimations'\" }, classAttribute: \"mat-checkbox\" }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], exportAs: [\"matCheckbox\"], usesInheritance: true, ngImport: i0, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);position:relative}.mat-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-checkbox-layout{-webkit-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:rgba(0,0,0,0);transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:rgba(0,0,0,0)}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox-input:focus~.mat-focus-indicator::before{content:\\\"\\\"}\"], dependencies: [{ kind: \"directive\", type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { kind: \"directive\", type: i3.CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: [\"cdkObserveContentDisabled\", \"debounce\"], outputs: [\"cdkObserveContent\"], exportAs: [\"cdkObserveContent\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatCheckbox, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-checkbox', exportAs: 'matCheckbox', host: {\n                        'class': 'mat-checkbox',\n                        '[id]': 'id',\n                        '[attr.tabindex]': 'null',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                        '[class.mat-checkbox-checked]': 'checked',\n                        '[class.mat-checkbox-disabled]': 'disabled',\n                        '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                        '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                    }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], inputs: ['disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);position:relative}.mat-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-checkbox-layout{-webkit-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:rgba(0,0,0,0);transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:rgba(0,0,0,0)}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox-input:focus~.mat-focus-indicator::before{content:\\\"\\\"}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n    multi: true,\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatCheckboxRequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatCheckboxRequiredValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatCheckboxRequiredValidator, selector: \"mat-checkbox[required][formControlName],\\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]\", providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatCheckboxRequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                    providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based checkbox implementations. */\nclass _MatCheckboxRequiredValidatorModule {\n}\n_MatCheckboxRequiredValidatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n_MatCheckboxRequiredValidatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, declarations: [MatCheckboxRequiredValidator], exports: [MatCheckboxRequiredValidator] });\n_MatCheckboxRequiredValidatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MatCheckboxRequiredValidator],\n                    declarations: [MatCheckboxRequiredValidator],\n                }]\n        }] });\nclass MatCheckboxModule {\n}\nMatCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatCheckboxModule, declarations: [MatCheckbox], imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule], exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule] });\nMatCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatCheckboxModule, imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule, MatCommonModule, _MatCheckboxRequiredValidatorModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule],\n                    exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                    declarations: [MatCheckbox],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxBase, _MatCheckboxRequiredValidatorModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}